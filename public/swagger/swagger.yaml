openapi: '3.0.0'
info:
  title: Topmama Book API's
  description: Topmama books API
  version: 1.0.0
  contact: 
    name: Donald O
    email: donopiyo@gmail.com
  
servers:
- url: http://local-dev:8000/
  description: kvm development server
  
tags:
  - name: Book
    description: Book operations
  - name: Books
    description: Book list
    
paths:
  /api/v1/books:
    summary: Return all list of books
    description: Book list
    get:
      tags:
        - Books
      responses:
        '200':
          description: A list of books.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BookWithId'
                  
    post:
      tags:
        - Books
      summary: adding a new book
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        '201':
          description: Created
        '409':
          description: Conflict Book exists
          
  /api/v1/books/{id}:
    summary: Find Book by id
    description: Returns Book based on id
    get:
      tags:
        - Book
      parameters:
        - name: id
          in: path
          description: book unique identity
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: book data.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        '400':
          description: Bad Request
          
  /api/v1/books/{id}/comments:
    summary: Find Book comments by id
    description: Returns Book comments based on id
    get:
      tags:
        - Book
      parameters:
        - name: id
          in: path
          description: book unique identity
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: A list of book comments.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
                  
  /api/v1/books/{id}/characters:
    summary: Find Book characters by id
    description: Returns Book characters based on id
    get:
      tags:
        - Book
      parameters:
        - name: id
          in: path
          description: book unique identity
          required: true
          schema:
            type: integer
            format: int64
        - $ref: '#/components/parameters/sortCharacters'
        - $ref: '#/components/parameters/filterCharacters'
          
      responses:
        '200':
          description: A list of book characters.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Character'
  
components:
  schemas:
    GeneralError:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
          
    Book:
      type: object
      required:
        - title
        - authors
      properties:
        title:
          type: string
        release_date:
          type: integer
          format: int32
        authors:
          type: array
          items:
            $ref: '#/components/schemas/Author'
    BookWithId:
      allOf:
        - $ref: '#/components/schemas/Book'
        - type: object
          properties:
            id:
              type: integer
              format: int64
            comments_count:
              type: integer
              format: int64
            
    Author:
      type: object
      properties:
        name:
          type: string
    AuthorWithId:
      allOf:
        - $ref: '#/components/schemas/Author'
        - type: object
          properties:
            id:
              type: integer
              format: int64
    Character:
      type: object
      required: 
        - name
        - gender
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        age:
          type: integer
          format: int32
        created_at:
          type: string
        updated_at:
          type: string
        gender:
          $ref: '#/components/schemas/Gender'
          
    Comment:
      type: object
      required:
        - comment
        - ip
      properties:
        id:
          type: integer
          format: int64
        comment:
          type: string
        ip:
          type: string
        created_at:
          type: string
        updated_at:
          type: string
          
    Gender:
      type: object
      required:
        - gender_type
      properties:
        gender_type:
          type: string
    GenderWithId:
      allOf:
        - $ref: '#/components/schemas/Gender'
        - type: object
          properties:
            id:
              type: integer
              format: int64
  parameters:
    sortCharacters:
      name: sort
      in: query
      description: sort paraemter
      required: false
      schema:
        type: string
        enum: [name,age,gender]
    filterCharacters:
      name: filter
      in: query
      description: filter paraemter
      required: false
      schema:
        type: string
        enum: [Male,Female,Other]
      
  responses:
    NotFound:
      description: Entity not found.
    IllegalInput:
      description: Illegal input for operation.
    GeneralError:
      description: General Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GeneralError'