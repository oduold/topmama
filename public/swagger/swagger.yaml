openapi: '3.0.0'
info:
  title: Topmama Book API's
  description: Topmama books API
  version: 1.0.0
  contact: 
    name: Donald O
    email: donopiyo@gmail.com
  
servers:
- url: http://localhost:8000/
  description: development server
- url: http://local-dev:8000/
  description: kvm development server
  
tags:
  - name: Book
    description: Book operations
  - name: Books
    description: Book list
paths:
  /api/v1/books:
    summary: Return all list of books
    description: Book list
    get:
      tags:
        - Books
      responses:
        '200':
          description: A list of books.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
    post:
      tags:
        - Books
      responses:
        '201':
          description: Created
  /api/v1/books/{id}:
    summary: Find Book by id
    description: Returns Book based on id
    get:
      tags:
        - Book
      parameters:
        - name: id
          in: path
          description: book unique identity
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: book data.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        '400':
          description: Bad Request
  /api/v1/books/{id}/comments:
    summary: Find Book comments by id
    description: Returns Book comments based on id
    get:
      tags:
        - Book
      parameters:
        - name: id
          in: path
          description: book unique identity
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: A list of book comments.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
  /api/v1/books/{id}/characters:
    summary: Find Book characters by id
    description: Returns Book characters based on id
    get:
      tags:
        - Book
      parameters:
        - name: id
          in: path
          description: book unique identity
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: A list of book characters.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Character'
  
components:
  schemas:
    GeneralError:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
    Book:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        release_date:
          type: integer
          format: int32
        comments_count:
          type: integer
          format: int64
        authors:
          type: array
          items:
            $ref: '#/components/schemas/Author'
            
    Author:
      type: object
      properties:
        name:
          type: string
    Character:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        age:
          type: integer
          format: int32
        created_at:
          type: string
        updated_at:
          type: string
        gender:
          $ref: '#/components/schemas/Gender'
    Comment:
      type: object
      properties:
        id:
          type: integer
          format: int64
        comment:
          type: string
        ip:
          type: string
        created_at:
          type: string
        updated_at:
          type: string
    Gender:
      type: object
      properties:
        gender_type:
          type: string
  parameters:
    sort:
      name: sort
      in: query
      description: sort paraemter
      required: false
      schema:
        type: string
      
  responses:
    NotFound:
      description: Entity not found.
    IllegalInput:
      description: Illegal input for operation.
    GeneralError:
      description: General Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GeneralError'